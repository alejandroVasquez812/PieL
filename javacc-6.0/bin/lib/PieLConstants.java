/* Generated By:JavaCC: Do not edit this line. PieLConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PieLConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int OP = 6;
  /** RegularExpression Id. */
  int ARITH = 7;
  /** RegularExpression Id. */
  int LCURLYBRACE = 8;
  /** RegularExpression Id. */
  int RCURLYBRACE = 9;
  /** RegularExpression Id. */
  int LSQUAREBRACKET = 10;
  /** RegularExpression Id. */
  int RSQUAREBRACKET = 11;
  /** RegularExpression Id. */
  int LPARENTHESIS = 12;
  /** RegularExpression Id. */
  int RPARENTHESIS = 13;
  /** RegularExpression Id. */
  int SCOPE = 14;
  /** RegularExpression Id. */
  int COLON = 15;
  /** RegularExpression Id. */
  int SEMICOLON = 16;
  /** RegularExpression Id. */
  int COMMA = 17;
  /** RegularExpression Id. */
  int QUESTIONMARK = 18;
  /** RegularExpression Id. */
  int ELLIPSIS = 19;
  /** RegularExpression Id. */
  int ASSIGNEQUAL = 20;
  /** RegularExpression Id. */
  int TIMESEQUAL = 21;
  /** RegularExpression Id. */
  int DIVIDEEQUAL = 22;
  /** RegularExpression Id. */
  int MODEQUAL = 23;
  /** RegularExpression Id. */
  int PLUSEQUAL = 24;
  /** RegularExpression Id. */
  int MINUSEQUAL = 25;
  /** RegularExpression Id. */
  int SHIFTLEFTEQUAL = 26;
  /** RegularExpression Id. */
  int SHIFTRIGHTEQUAL = 27;
  /** RegularExpression Id. */
  int BITWISEANDEQUAL = 28;
  /** RegularExpression Id. */
  int BITWISEXOREQUAL = 29;
  /** RegularExpression Id. */
  int BITWISEOREQUAL = 30;
  /** RegularExpression Id. */
  int OR = 31;
  /** RegularExpression Id. */
  int AND = 32;
  /** RegularExpression Id. */
  int BITWISEOR = 33;
  /** RegularExpression Id. */
  int BITWISEXOR = 34;
  /** RegularExpression Id. */
  int AMPERSAND = 35;
  /** RegularExpression Id. */
  int EQUAL = 36;
  /** RegularExpression Id. */
  int NOTEQUAL = 37;
  /** RegularExpression Id. */
  int LESSTHAN = 38;
  /** RegularExpression Id. */
  int GREATERTHAN = 39;
  /** RegularExpression Id. */
  int LESSTHANOREQUALTO = 40;
  /** RegularExpression Id. */
  int GREATERTHANOREQUALTO = 41;
  /** RegularExpression Id. */
  int SHIFTLEFT = 42;
  /** RegularExpression Id. */
  int SHIFTRIGHT = 43;
  /** RegularExpression Id. */
  int PLUS = 44;
  /** RegularExpression Id. */
  int MINUS = 45;
  /** RegularExpression Id. */
  int STAR = 46;
  /** RegularExpression Id. */
  int DIVIDE = 47;
  /** RegularExpression Id. */
  int MOD = 48;
  /** RegularExpression Id. */
  int PLUSPLUS = 49;
  /** RegularExpression Id. */
  int MINUSMINUS = 50;
  /** RegularExpression Id. */
  int TILDE = 51;
  /** RegularExpression Id. */
  int NOT = 52;
  /** RegularExpression Id. */
  int DOT = 53;
  /** RegularExpression Id. */
  int POINTERTO = 54;
  /** RegularExpression Id. */
  int DOTSTAR = 55;
  /** RegularExpression Id. */
  int ARROWSTAR = 56;
  /** RegularExpression Id. */
  int AUTO = 57;
  /** RegularExpression Id. */
  int BREAK = 58;
  /** RegularExpression Id. */
  int CASE = 59;
  /** RegularExpression Id. */
  int CATCH = 60;
  /** RegularExpression Id. */
  int CHAR = 61;
  /** RegularExpression Id. */
  int CONST = 62;
  /** RegularExpression Id. */
  int CONTINUE = 63;
  /** RegularExpression Id. */
  int _DEFAULT = 64;
  /** RegularExpression Id. */
  int DELETE = 65;
  /** RegularExpression Id. */
  int DO = 66;
  /** RegularExpression Id. */
  int DOUBLE = 67;
  /** RegularExpression Id. */
  int ELSE = 68;
  /** RegularExpression Id. */
  int ENUM = 69;
  /** RegularExpression Id. */
  int EXTERN = 70;
  /** RegularExpression Id. */
  int FLOAT = 71;
  /** RegularExpression Id. */
  int FOR = 72;
  /** RegularExpression Id. */
  int FRIEND = 73;
  /** RegularExpression Id. */
  int GOTO = 74;
  /** RegularExpression Id. */
  int IF = 75;
  /** RegularExpression Id. */
  int INLINE = 76;
  /** RegularExpression Id. */
  int INT = 77;
  /** RegularExpression Id. */
  int LONG = 78;
  /** RegularExpression Id. */
  int NEW = 79;
  /** RegularExpression Id. */
  int PRIVATE = 80;
  /** RegularExpression Id. */
  int PROTECTED = 81;
  /** RegularExpression Id. */
  int PUBLIC = 82;
  /** RegularExpression Id. */
  int REDECLARED = 83;
  /** RegularExpression Id. */
  int REGISTER = 84;
  /** RegularExpression Id. */
  int RETURN = 85;
  /** RegularExpression Id. */
  int SHORT = 86;
  /** RegularExpression Id. */
  int SIZEOF = 87;
  /** RegularExpression Id. */
  int STATIC = 88;
  /** RegularExpression Id. */
  int CLASS = 89;
  /** RegularExpression Id. */
  int SWITCH = 90;
  /** RegularExpression Id. */
  int TEMPLATE = 91;
  /** RegularExpression Id. */
  int THIS = 92;
  /** RegularExpression Id. */
  int TRY = 93;
  /** RegularExpression Id. */
  int TYPEDEF = 94;
  /** RegularExpression Id. */
  int UNION = 95;
  /** RegularExpression Id. */
  int UNSIGNED = 96;
  /** RegularExpression Id. */
  int VIRTUAL = 97;
  /** RegularExpression Id. */
  int VOID = 98;
  /** RegularExpression Id. */
  int VOLATILE = 99;
  /** RegularExpression Id. */
  int WHILE = 100;
  /** RegularExpression Id. */
  int OPERATOR = 101;
  /** RegularExpression Id. */
  int TRUETOK = 102;
  /** RegularExpression Id. */
  int FALSETOK = 103;
  /** RegularExpression Id. */
  int THROW = 104;
  /** RegularExpression Id. */
  int TYPE = 105;
  /** RegularExpression Id. */
  int TYPENUMBER = 106;
  /** RegularExpression Id. */
  int TYPESTRING = 107;
  /** RegularExpression Id. */
  int STRUCT = 108;
  /** RegularExpression Id. */
  int TYPEARRAY = 109;
  /** RegularExpression Id. */
  int TYPELIST = 110;
  /** RegularExpression Id. */
  int TYPEFUNCTION = 111;
  /** RegularExpression Id. */
  int ID = 112;
  /** RegularExpression Id. */
  int LETTER = 113;
  /** RegularExpression Id. */
  int STRING = 114;
  /** RegularExpression Id. */
  int NUMBER = 115;
  /** RegularExpression Id. */
  int DIGIT = 116;
  /** RegularExpression Id. */
  int SIGNED = 117;
  /** RegularExpression Id. */
  int MULTITERM = 118;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<OP>",
    "<ARITH>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"::\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"?\"",
    "\"...\"",
    "\"=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"!\"",
    "\".\"",
    "\"->\"",
    "\".*\"",
    "\"->*\"",
    "\"auto\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"delete\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extern\"",
    "\"float\"",
    "\"for\"",
    "\"friend\"",
    "\"goto\"",
    "\"if\"",
    "\"inline\"",
    "\"int\"",
    "\"long\"",
    "\"new\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"redeclared\"",
    "\"register\"",
    "\"return\"",
    "\"short\"",
    "\"sizeof\"",
    "\"static\"",
    "\"class\"",
    "\"switch\"",
    "\"template\"",
    "\"this\"",
    "\"try\"",
    "\"typedef\"",
    "\"union\"",
    "\"unsigned\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"operator\"",
    "\"true\"",
    "\"false\"",
    "\"throw\"",
    "<TYPE>",
    "\"numero\"",
    "\"estrin\"",
    "<STRUCT>",
    "\"arreglo\"",
    "\"lista\"",
    "\"funcion\"",
    "<ID>",
    "<LETTER>",
    "<STRING>",
    "<NUMBER>",
    "<DIGIT>",
    "<SIGNED>",
    "<MULTITERM>",
    "\"Termina.\"",
    "\"Crea un \"",
    "\" llamado \"",
    "\" con valor \"",
    "\"Mientras \"",
    "\" repite {\"",
    "\" de \"",
    "\" con valores [\"",
    "\"Si \"",
    "\" es cierto {\"",
    "\" de lo contrario si\"",
    "\"si no es cierto {\"",
    "\"Imprime \"",
    "\"Imprime arreglo \"",
    "\"Imprime el elemento \"",
    "\" del arreglo \"",
    "\" es igual a \"",
    "\"el elemento \"",
    "\" y \"",
  };

}
