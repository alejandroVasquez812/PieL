/* PieLTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. PieLTokenManager.java */
import java.util.*;
import java.io.*;

/** Token Manager. */
@SuppressWarnings("unused")public class PieLTokenManager implements PieLConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfc00000000000000L) != 0L || (active1 & 0x218001fffff83f8fL) != 0L || (active2 & 0xfL) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 0;
            return 124;
         }
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 0;
            return 12;
         }
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 0;
            return 42;
         }
         if ((active1 & 0x70L) != 0L || (active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 0;
            return 56;
         }
         if ((active0 & 0x144200002000000L) != 0L)
            return 0;
         if ((active1 & 0x70000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 0;
            return 5;
         }
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 0;
            return 17;
         }
         return -1;
      case 1:
         if ((active1 & 0x80cL) != 0L)
            return 124;
         if ((active0 & 0xfe00000000000000L) != 0L || (active1 & 0x218001fffffff7d3L) != 0L || (active2 & 0x4fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return 124;
         }
         if ((active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return 116;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 155;
         return -1;
      case 2:
         if ((active1 & 0x2000a100L) != 0L)
            return 124;
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xfe00000000000000L) != 0L || (active1 & 0x18001ffdfff56fbL) != 0L || (active2 & 0xeL) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 2;
            return 124;
         }
         return -1;
      case 3:
         if ((active0 & 0xd400000000000000L) != 0L || (active1 & 0x18001bbcfff12cbL) != 0L || (active2 & 0xeL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 3;
            }
            return 124;
         }
         if ((active0 & 0x2a00000000000000L) != 0L || (active1 & 0x4410004430L) != 0L)
            return 124;
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x5400000000000000L) != 0L || (active1 & 0x19082400080L) != 0L)
            return 124;
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x80002b4dbf124bL) != 0L || (active2 & 0xeL) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
            return 124;
         }
         return -1;
      case 5:
         if ((active1 & 0x5a4124aL) != 0L)
            return 124;
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x80002b481b0001L) != 0L || (active2 & 0xeL) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 5;
            return 124;
         }
         return -1;
      case 6:
         if ((active1 & 0x240010001L) != 0L)
            return 124;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x800029081a0000L) != 0L || (active2 & 0xeL) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 6;
            return 124;
         }
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x2908100000L) != 0L)
            return 124;
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active1 & 0xa0000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 7;
            }
            return 124;
         }
         return -1;
      case 8:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 8;
            return 124;
         }
         if ((active1 & 0x20000L) != 0L)
            return 124;
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active1 & 0x80000L) != 0L)
            return 124;
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active2 & 0x41L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 112;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 32:
         {
         jjmatchedKind = 1;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0xde00000000000000L, 0xb0L);
      case 33:
         {
         jjmatchedKind = 52;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L);
      case 37:
         {
         jjmatchedKind = 48;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x0L);
      case 38:
         {
         jjmatchedKind = 35;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x110000000L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 12);
      case 41:
         return jjStopAtPos(0, 13);
      case 42:
         {
         jjmatchedKind = 46;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
      case 43:
         {
         jjmatchedKind = 44;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x2000001000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 17);
      case 45:
         {
         jjmatchedKind = 45;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x144000002000000L, 0x0L, 0x0L);
      case 46:
         {
         jjmatchedKind = 53;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x80000000080000L, 0x0L, 0x0L);
      case 47:
         {
         jjmatchedKind = 47;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L);
      case 58:
         {
         jjmatchedKind = 15;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 16);
      case 60:
         {
         jjmatchedKind = 38;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x50004000000L, 0x0L, 0x0L);
      case 61:
         {
         jjmatchedKind = 20;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L, 0x0L);
      case 62:
         {
         jjmatchedKind = 39;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0xa0008000000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 18);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xeL);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 10);
      case 93:
         return jjStopAtPos(0, 11);
      case 94:
         {
         jjmatchedKind = 34;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0x2000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfL, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70L, 0x40L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000380L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x70000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5c00000L, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x14078000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 8);
      case 124:
         {
         jjmatchedKind = 33;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0xc0000000L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 9);
      case 126:
         return jjStopAtPos(0, 51);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 42:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 43:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 45:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 155);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 58:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 60:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 62:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000008000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000000L, active1, 0x8000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1400000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8800000000000000L, active2, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4080000008388003L, active2, 0x20L);
      case 102:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 75, 124);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x11010400000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000200800000L, active2, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000002000090L, active2, 0x40L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xeL);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180003020L, active2, 0L);
      case 111:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000000L, active1, 0xc00004508L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x100004020030200L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x40000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0x80L);
      case 124:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(2, 125);
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(2, 135);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x41L);
      case 42:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         break;
      case 46:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      case 61:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x3000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x8900002000000000L, active2, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1494010200L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200008800001002L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000000L, active1, 0x4000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1400000000420080L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L, active2, 0xeL);
      case 114:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 124);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80010200000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x4000000100000010L, active2, 0x20L);
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 124);
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000000000L, active1, 0x200440L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000028L, active2, 0L);
      case 119:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 124);
         break;
      case 121:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 124);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x300000800000081L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 124);
         break;
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 124);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 124);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 124);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40880242L, active2, 0x40L);
      case 103:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 124);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100101000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000040000L, active2, 0x10L);
      case 109:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 124);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1400000000000000L, active2, 0x1L);
      case 111:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 124);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 124);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10080000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 124);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000400000L, active2, 0xeL);
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 124);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x8002000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x205020000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1500000000000000L, active2, 0x10L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000010000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000004080000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 101:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 124);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 124);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 124);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x80000001040000L, active2, 0x2eL);
      case 107:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 124);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000008000008L, active2, 0x40L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 124);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1200L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000L, active2, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200040L, active2, 0L);
      case 115:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 124);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 124);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 124);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 124);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000002L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000001L, active2, 0L);
      case 119:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 124);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000208000000L, active2, 0x10L);
      case 99:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 124);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 124);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 100:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 124);
         break;
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 124);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 124);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 124);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000L, active2, 0x40L);
      case 102:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 124);
         break;
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 104:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 124);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000800000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80001L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xeL);
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 124);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 124);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x80000100000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000110000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1400000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1480000000080000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 124);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000100100000L, active2, 0xfL);
      case 102:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 124);
         break;
      case 108:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 97, 124);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 124);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8020000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L, active2, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(7, 120);
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xcL);
      case 46:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(7, 119);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 100:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 96, 124);
         break;
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 124);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 124);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 99, 124);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L, active2, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1400000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 124);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 101, 124);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000080000L, active2, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(8, 121);
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x4L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 81, 124);
         break;
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x80000L, active2, 0x18L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0x9400000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x1L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 83, 124);
         break;
      case 103:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active1, 0x1400000000000000L, active2, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(10, 122);
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000000000L, active2, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(11, 133);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(11, 134);
         break;
      case 101:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0xdL);
      case 111:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active1, 0x8000000000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active1, 0x1000000000000000L, active2, 0L);
      case 123:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(11, 126);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(12, 132);
         return jjMoveStringLiteralDfa13_0(active1, 0x1000000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active1, 0x8000000000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 91:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(13, 124);
         break;
      case 101:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active1, 0x8000000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active1, 0x8000000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x5L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(15, 130);
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x1L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x8000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2);
      return 16;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa17_0(active1, 0x8000000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x8L);
      case 123:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(16, 128);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, active2);
      return 17;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa18_0(active1, 0x8000000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, active2);
      return 18;
   }
   switch(curChar)
   {
      case 105:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(18, 127);
         break;
      case 111:
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, active2);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(19, 131);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, active2);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 155;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     { jjCheckNAddStates(0, 7); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddStates(8, 10); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(11, 16); }
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(124); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     { jjCheckNAddStates(17, 21); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(1, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     { jjCheckNAdd(153); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     { jjCheckNAddTwoStates(150, 151); }
                  }
                  break;
               case 155:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(124); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(124); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(124); }
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(124); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(124); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                     kind = 5;
                  break;
               case 32:
               case 49:
                  if (curChar == 32)
                     { jjCheckNAdd(31); }
                  break;
               case 38:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 41:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 55:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 60:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 66:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 70:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 76:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 80:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 86:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 88:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 94:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 98:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 104:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 106:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 112:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 125:
                  if (curChar == 34)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 126:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 128:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 129:
                  if (curChar == 34 && kind > 114)
                     kind = 114;
                  break;
               case 130:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(25, 28); }
                  break;
               case 131:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 132:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(131); }
                  break;
               case 134:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(29, 31); }
                  break;
               case 136:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(29, 31); }
                  break;
               case 137:
                  if (curChar != 34)
                     break;
                  if (kind > 118)
                     kind = 118;
                  { jjCheckNAddStates(32, 35); }
                  break;
               case 138:
                  if (curChar == 45)
                     { jjCheckNAdd(139); }
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  { jjCheckNAddStates(17, 21); }
                  break;
               case 140:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  { jjCheckNAddStates(36, 39); }
                  break;
               case 142:
                  if (curChar == 34)
                     { jjCheckNAddStates(29, 31); }
                  break;
               case 143:
                  if (curChar != 44)
                     break;
                  if (kind > 118)
                     kind = 118;
                  { jjCheckNAddStates(40, 42); }
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  { jjCheckNAddStates(43, 48); }
                  break;
               case 145:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(49, 52); }
                  break;
               case 146:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(29, 31); }
                  break;
               case 147:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 148:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(146); }
                  break;
               case 149:
                  if (curChar == 45)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 151:
                  if (curChar == 46)
                     { jjCheckNAdd(152); }
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAdd(152); }
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  { jjCheckNAdd(153); }
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAddStates(0, 7); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAdd(124); }
                  }
                  if (curChar == 101)
                     { jjAddStates(53, 59); }
                  else if (curChar == 110)
                     { jjAddStates(60, 61); }
                  else if (curChar == 109)
                     { jjAddStates(62, 64); }
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAdd(124); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 155:
               case 1:
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 42:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAdd(124); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAdd(124); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAdd(124); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 116:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAdd(124); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     { jjCheckNAdd(124); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 121;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 116;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 94;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 66;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 4:
                  if (curChar == 114 && kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 111 && kind > 108)
                     kind = 108;
                  break;
               case 8:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 97 && kind > 108)
                     kind = 108;
                  break;
               case 15:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 109)
                     { jjAddStates(62, 64); }
                  break;
               case 20:
                  if (curChar == 115 && kind > 7)
                     kind = 7;
                  break;
               case 21:
                  if (curChar == 97)
                     { jjCheckNAdd(20); }
                  break;
               case 22:
                  if (curChar == 111)
                     { jjCheckNAdd(20); }
                  break;
               case 23:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 111 && kind > 7)
                     kind = 7;
                  break;
               case 26:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 110)
                     { jjAddStates(60, 61); }
                  break;
               case 31:
                  if (curChar == 97 && kind > 6)
                     kind = 6;
                  break;
               case 33:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 43:
                  if (curChar == 111 && kind > 105)
                     kind = 105;
                  break;
               case 44:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 101)
                     { jjAddStates(53, 59); }
                  break;
               case 50:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 57:
                  if (curChar == 101 && kind > 6)
                     kind = 6;
                  break;
               case 58:
               case 68:
               case 78:
               case 96:
                  if (curChar == 117)
                     { jjCheckNAdd(57); }
                  break;
               case 59:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 69:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 77:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 79:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 89:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 95:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 97:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 99:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 105:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 107:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 113:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 101 && kind > 7)
                     kind = 7;
                  break;
               case 115:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 110 && kind > 105)
                     kind = 105;
                  break;
               case 119:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(124); }
                  break;
               case 124:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(124); }
                  break;
               case 126:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 127:
                  if (curChar == 92)
                     { jjAddStates(65, 67); }
                  break;
               case 128:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 134:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(29, 31); }
                  break;
               case 135:
                  if (curChar == 92)
                     { jjAddStates(68, 70); }
                  break;
               case 136:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(29, 31); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 155:
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 126:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(22, 24); }
                  break;
               case 134:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(29, 31); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 155 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   150, 151, 153, 138, 139, 140, 142, 143, 150, 153, 139, 126, 127, 129, 134, 135, 
   137, 138, 139, 140, 142, 143, 126, 127, 129, 126, 127, 131, 129, 134, 135, 137, 
   138, 139, 142, 143, 138, 142, 143, 144, 138, 139, 142, 138, 139, 140, 142, 143, 
   144, 134, 135, 146, 137, 56, 67, 77, 95, 113, 117, 122, 42, 47, 21, 24, 
   29, 128, 130, 132, 136, 145, 147, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\173", "\175", "\133", "\135", 
"\50", "\51", "\72\72", "\72", "\73", "\54", "\77", "\56\56\56", "\75", "\52\75", 
"\57\75", "\45\75", "\53\75", "\55\75", "\74\74\75", "\76\76\75", "\46\75", "\136\75", 
"\174\75", "\174\174", "\46\46", "\174", "\136", "\46", "\75\75", "\41\75", "\74", "\76", 
"\74\75", "\76\75", "\74\74", "\76\76", "\53", "\55", "\52", "\57", "\45", "\53\53", 
"\55\55", "\176", "\41", "\56", "\55\76", "\56\52", "\55\76\52", "\141\165\164\157", 
"\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\145\154\145\164\145", "\144\157", "\144\157\165\142\154\145", "\145\154\163\145", 
"\145\156\165\155", "\145\170\164\145\162\156", "\146\154\157\141\164", "\146\157\162", 
"\146\162\151\145\156\144", "\147\157\164\157", "\151\146", "\151\156\154\151\156\145", "\151\156\164", 
"\154\157\156\147", "\156\145\167", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\144\145\143\154\141\162\145\144", 
"\162\145\147\151\163\164\145\162", "\162\145\164\165\162\156", "\163\150\157\162\164", 
"\163\151\172\145\157\146", "\163\164\141\164\151\143", "\143\154\141\163\163", 
"\163\167\151\164\143\150", "\164\145\155\160\154\141\164\145", "\164\150\151\163", "\164\162\171", 
"\164\171\160\145\144\145\146", "\165\156\151\157\156", "\165\156\163\151\147\156\145\144", 
"\166\151\162\164\165\141\154", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\157\160\145\162\141\164\157\162", "\164\162\165\145", 
"\146\141\154\163\145", "\164\150\162\157\167", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\124\145\162\155\151\156\141\56", 
"\103\162\145\141\40\165\156\40", "\40\154\154\141\155\141\144\157\40", 
"\40\143\157\156\40\166\141\154\157\162\40", "\40\144\145\40", "\40\143\157\156\40\166\141\154\157\162\145\163\40\133", 
"\123\151\40", "\40\145\163\40\143\151\145\162\164\157\40\173", 
"\40\144\145\40\154\157\40\143\157\156\164\162\141\162\151\157\40\163\151", "\163\151\40\156\157\40\145\163\40\143\151\145\162\164\157\40\173", 
"\111\155\160\162\151\155\145\40", "\111\155\160\162\151\155\145\40\141\162\162\145\147\154\157\40", 
"\111\155\160\162\151\155\145\40\145\154\40\145\154\145\155\145\156\164\157\40", "\40\144\145\154\40\141\162\162\145\147\154\157\40", 
"\40\145\163\40\151\147\165\141\154\40\141\40", "\145\154\40\145\154\145\155\145\156\164\157\40", "\40\171\40", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getEndLine();
      beginColumn = endColumn = input_stream.getEndColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 118;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[1];
static int[] jjemptyColNo = new int[1];
static boolean[] jjbeenHere = new boolean[1];
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 6 :
         break;
      case 7 :
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 30 :
         break;
      case 31 :
         break;
      case 32 :
         break;
      case 33 :
         break;
      case 34 :
         break;
      case 35 :
         break;
      case 36 :
         break;
      case 37 :
         break;
      case 38 :
         break;
      case 39 :
         break;
      case 40 :
         break;
      case 41 :
         break;
      case 42 :
         break;
      case 43 :
         break;
      case 44 :
         break;
      case 45 :
         break;
      case 46 :
         break;
      case 47 :
         break;
      case 48 :
         break;
      case 49 :
         break;
      case 50 :
         break;
      case 51 :
         break;
      case 52 :
         break;
      case 53 :
         break;
      case 54 :
         break;
      case 55 :
         break;
      case 56 :
         break;
      case 57 :
         break;
      case 58 :
         break;
      case 59 :
         break;
      case 60 :
         break;
      case 61 :
         break;
      case 62 :
         break;
      case 63 :
         break;
      case 64 :
         break;
      case 65 :
         break;
      case 66 :
         break;
      case 67 :
         break;
      case 68 :
         break;
      case 69 :
         break;
      case 70 :
         break;
      case 71 :
         break;
      case 72 :
         break;
      case 73 :
         break;
      case 74 :
         break;
      case 75 :
         break;
      case 76 :
         break;
      case 77 :
         break;
      case 78 :
         break;
      case 79 :
         break;
      case 80 :
         break;
      case 81 :
         break;
      case 82 :
         break;
      case 83 :
         break;
      case 84 :
         break;
      case 85 :
         break;
      case 86 :
         break;
      case 87 :
         break;
      case 88 :
         break;
      case 89 :
         break;
      case 90 :
         break;
      case 91 :
         break;
      case 92 :
         break;
      case 93 :
         break;
      case 94 :
         break;
      case 95 :
         break;
      case 96 :
         break;
      case 97 :
         break;
      case 98 :
         break;
      case 99 :
         break;
      case 100 :
         break;
      case 101 :
         break;
      case 102 :
         break;
      case 103 :
         break;
      case 104 :
         break;
      case 105 :
         break;
      case 108 :
         break;
      case 112 :
         break;
      case 113 :
         break;
      case 114 :
         break;
      case 115 :
         break;
      case 116 :
         break;
      case 117 :
         break;
      case 118 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 119 :
         break;
      case 120 :
         break;
      case 121 :
         break;
      case 122 :
         break;
      case 123 :
         break;
      case 124 :
         break;
      case 125 :
         break;
      case 126 :
         break;
      case 127 :
         break;
      case 128 :
         break;
      case 129 :
         break;
      case 130 :
         break;
      case 131 :
         break;
      case 132 :
         break;
      case 133 :
         break;
      case 134 :
         break;
      case 135 :
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public PieLTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public PieLTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 155; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffff13ffffffffffL, 0xffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[155];
    static private final int[] jjstateSet = new int[2 * 155];

    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    
    static protected char curChar;
}
